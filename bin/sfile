#!/usr/bin/env node
var sfile = require('../lib')
  , clip = require('cliparoo')
  , opt = require('optimist')
  , argv = opt
    .usage("[Usage]\n\nsfile [command|library]\n\nCommands:\n\n  s, search [library]\tTo search the library...\n  g, get [library]\tTo get the library assets links...")
    .argv;

switch (argv._[0]) {
  case 'i':
  case 'info':
    var prettyjson = require('prettyjson');
    var keyword = argv._[1];
    if (!keyword || argv.help) {
      opt.showHelp();
      return;
    }
    keyword = keyword.trim();

    sfile.info(keyword, function (err, data) {
      if (err) {
        return sfile.error(err);
      }

      if (data.assets) {
        data.assets = [data.assets[0]]
      }

      console.log(prettyjson.render(data));
    });
    break;
  case 'search':
  case 's':
    argv = opt
      .usage("sfile " + argv._[0] + " [library]")
      .alias('s', 'ssl')
      .alias('h', 'html')
      .alias('j', 'jade')
      .alias('n', 'no-link')
      .describe('s', 'Output HTTPS link')
      .describe('h', 'Output HTML')
      .describe('j', 'Output Jade Markup')
      .describe('n', 'Do not show the link for latest version')
      .argv;

    var keyword = argv._[1];
    if (!keyword || argv.help) {
      opt.showHelp();
      return;
    }
    keyword = keyword.trim();

    sfile.search(keyword, function (err, data) {
      if (err) return sfile.error(err);

      if (!data.total) {
        return printLn("没有结果");
      }

      printLn(("搜索 " + keyword.bold + " 共有 " + (data.total + "").bold + " 个库，当前列出 " + (data.libs.length + "").bold + " 个:"));
      printLn("");

      data.libs.forEach(function (lib, index) {
        printLn(((index > 9 ? index : " " + index) + ")").grey + " " + lib.name.replace(keyword, keyword.bold) + " [" + lib.version.green + "]");

        printLn("");
      });
    });
    break;
  case "get":
  case "g":
    argv = opt
      .usage("sfile " + argv._[0] + " [library]")
      .alias('h', 'html')
      .alias('j', 'jade')
      .alias('s', 'ssl')
      .alias('c', 'copy')
      .alias('v', 'version')
      .describe('v', 'Use given version, leave empty if you want to see all supported version ')
      .describe('h', 'Output HTML')
      .describe('j', 'Output Jade Markup')
      .describe('s', 'Output HTTPS link')
      .describe('c', 'Copy to your system clipboard')
      .argv;

    var keyword = argv._[1];
    if (!keyword || argv.help) {
      opt.showHelp();
      return;
    }
    keyword = keyword.trim();
    sfile.get(keyword, function (err, lib, suggest) {
      if (err) return sfile.error(err);

      if (!lib) {
        printLn("未找到库: " + keyword);
        // 搜索建议
        if (suggest.length > 0) {
          printLn("");
          for (var i in suggest) {
            suggest[i] = suggest[i].underline;
          }
          printLn("你是不是要找: ".cyan + suggest.slice(0, 5).join(" "));
        }
        return;
      }

      var version = (argv.version && argv.version !== true) ? argv.version : "" + lib.version;
      var matched = false;

      // 匹配package.json给出的版本
      lib.assets.forEach(function (asset) {
        if (asset.version == version) {
          if (matched) return;
          matched = asset;
        }
      });

      // 未匹配容错
      if (!matched && lib.assets[0] && !argv.version) {
        matched = lib.assets[0];
      }

      if (!matched) {
        printLn("未找到 " + keyword + " [" + (argv.version + "").red + "]");
      } else {
        printLn("找到 " + lib.name.bold + " [" + version.green + "]:");
        printLn("");

        var urls = [];
        matched.files.forEach(function (file) {
          var path = "/" + lib.name + "/" + version + "/" + file;
          var url = sfile.url(path, argv.ssl);
          if (argv.html) {
            url = sfile.html(url);
          } else if (argv.jade) {
            url = sfile.jade(url);
          }

          url && printLn(url) && urls.push(url);
        });

        // 复制到剪贴板
        if (argv.copy) {
          clip(urls.join(argv.html || argv.jade ? "\n" : "\\\\n"), function (err) {
            if (err) return sfile.error(err);

            printLn("✔ 已复制到剪贴板".green);
          });
        }
      }
      printLn("");
      if (argv.version)
        printLn("支持的版本号: ".cyan + lib.assets.map(function (asset) {
          return asset.version.underline
        }).join(" "));
    });
    break;
  default:
    if (argv.version || argv.v) {
      var json = require("../package.json");
      printLn(json.version);
    } else if (argv._[0]) {
      var List = require('term-list')
        , list = new List({ marker: '\033[36m› \033[0m', markerLength: 2 })
        , styles = ['', 'html', 'jade']
        , current_style_index = 0;

      keyword = argv._[0].trim();

      sfile.search(keyword, function (err, data) {
        if (err) return sfile.error(err);

        if (!data.total) {
          return printLn("没有结果");
        }

        printLn(("搜索 " + keyword.bold + " 共有 " + (data.total + "").bold + " 个库，当前列出 " + (data.libs.length + "").bold + " 个:"));

        data.libs.forEach(function (lib, index) {
          var url = sfile.url("/" + lib.name + "/" + lib.version + "/" + lib.filename);
          lib.index = index;
          lib.base = lib.name.replace(keyword, keyword.bold) + " [" + lib.version.green + "] ";
          lib.url = url;
          lib.to_copy = url;
          lib.subLabel = lib.filename;
          lib.current = 'url';
          list.add(lib, lib.base + lib.subLabel.grey);
        });

        var changeStyle = function (reverse) {
          if (reverse) {
            current_style_index = current_style_index - 1 < 0 ? 2 : current_style_index - 1;
          } else {
            current_style_index = current_style_index + 1 > 2 ? 0 : current_style_index + 1;
          }
          var current_style = styles[current_style_index];

          list.items.forEach(function (it, i) {
            var current = list.at(i);
            current.label = it.id.base + it.id.subLabel.grey + (current_style && (' [' + current_style + ']').red);
            current.id.to_copy = current_style ? sfile[current_style](it.id.url) : it.id.url;
          });
          list.draw();
        };

        list.start();

        list.on("keypress", function (key, item) {
          switch (key.name) {
            case "return":
              clip(item.to_copy, function (err) {
                if (err) return sfile.error(err);

                printLn("✔ 已复制到剪贴板".green);
              });
              list.stop();
              break;
            case "left":
              changeStyle(true);
              break;
            case "right":
              changeStyle(false);
              break;
          }
        });

        list.on('empty', function () {
          list.stop();
        });
      });
    } else {
      opt.showHelp();
    }
}

function printLn() {
  var args = Array.prototype.slice.call(arguments, 0);
  args[0] = " " + args[0];
  console.log.apply(this, args);
  return true;
}
